{"version":3,"sources":["webpack://postRobot/webpack/universalModuleDefinition","webpack://postRobot/webpack/bootstrap","webpack://postRobot/./node_modules/cross-domain-utils/src/util.js","webpack://postRobot/./node_modules/cross-domain-utils/src/constants.js","webpack://postRobot/./node_modules/cross-domain-utils/src/utils.js","webpack://postRobot/./node_modules/zalgo-promise/src/utils.js","webpack://postRobot/./node_modules/zalgo-promise/src/exceptions.js","webpack://postRobot/./node_modules/zalgo-promise/src/flush.js","webpack://postRobot/./node_modules/zalgo-promise/src/promise.js","webpack://postRobot/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://postRobot/./node_modules/belter/src/util.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://postRobot/./node_modules/belter/src/dom.js","webpack://postRobot/./src/conf/config.js","webpack://postRobot/./src/conf/constants.js","webpack://postRobot/./src/global.js","webpack://postRobot/./src/lib/hello.js","webpack://postRobot/./src/lib/windows.js","webpack://postRobot/./node_modules/universal-serialize/src/constants.js","webpack://postRobot/./node_modules/universal-serialize/src/common.js","webpack://postRobot/./node_modules/universal-serialize/src/serialize.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/function.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/error.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/promise.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/regex.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/date.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/array.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/object.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/string.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/number.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/null.js","webpack://postRobot/./node_modules/universal-serialize/src/deserialize.js","webpack://postRobot/./src/serialize/window.js","webpack://postRobot/./src/bridge/common.js","webpack://postRobot/./src/serialize/function.js","webpack://postRobot/./src/serialize/serialize.js","webpack://postRobot/./src/serialize/promise.js","webpack://postRobot/./src/drivers/send/strategies.js","webpack://postRobot/./src/drivers/send/index.js","webpack://postRobot/./src/drivers/listeners.js","webpack://postRobot/./src/drivers/receive/types.js","webpack://postRobot/./src/drivers/receive/index.js","webpack://postRobot/./src/public/on.js","webpack://postRobot/./src/public/send.js","webpack://postRobot/./src/setup.js","webpack://postRobot/./src/clean.js","webpack://postRobot/./src/index.js","webpack://postRobot/./src/types.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","isRegex","item","toString","PROTOCOL","MOCK","FILE","ABOUT","WILDCARD","WINDOW_TYPE","IFRAME","POPUP","IE_WIN_ACCESS_ERROR","isAboutProtocol","win","window","location","protocol","getParent","parent","err","getOpener","opener","canReadFromWindow","getActualDomain","Error","host","getDomain","domain","mockDomain","indexOf","isSameDomain","desc","getOwnPropertyDescriptor","isActuallySameDomain","isAncestorParent","child","childParent","result","push","getParents","getFrames","frames","len","length","frame","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","top","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getAncestor","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","isWindow","obj","Window","__cross_domain_utils_window_check__","closeWindow","close","isPromise","Promise","constructor","then","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","resolved","rejected","errorHandled","error","handlers","dispatching","stack","isAsync","res","reject","dispatch","setTimeout","j","dispatchPossiblyUnhandledError","asyncReject","onSuccess","onError","catch","undefined","finally","onFinally","try","timeout","time","clearTimeout","toPromise","TypeError","all","promises","count","results","prom","hash","keys","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","apply","delay","flush","_extends","assign","target","arguments","source","objectIDs","CrossDomainSafeWeakMap","weakmap","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","uniqueID","chars","replace","charAt","floor","str","btoa","encodeURIComponent","p1","String","fromCharCode","parseInt","Buffer","from","base64encode","Date","toISOString","slice","toLowerCase","memoizePromise","cache","memoizedPromiseFunction","subkey","val","uid","getObjectID","serializeArgs","reset","noop","stringifyError","level","newErr","prototype","MESSAGE_NAME","METHOD","HELLO","OPEN_TUNNEL","SERIALIZATION_TYPE","CROSS_DOMAIN_ZALGO_PROMISE","CROSS_DOMAIN_FUNCTION","CROSS_DOMAIN_WINDOW","getGlobal","getObj","globalStore","defStore","store","storeKey","defVal","del","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","getHelloPromise","sayHello","send","instanceID","data","getWindowInstanceID","markWindowKnown","TYPE","FUNCTION","ERROR","PROMISE","REGEX","DATE","ARRAY","OBJECT","STRING","NUMBER","BOOLEAN","NULL","UNDEFINED","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","code","toJSON","defaultSerializers","DESERIALIZER","RegExp","defaultDeserializers","cleanupProxyWindows","idToProxyWindow","id","shouldClean","document","body","interval","setInterval","clearInterval","ProxyWindow","serializedWindow","isProxyWindow","actualWindow","actualWindowPromise","winPromise","windowName","getType","getName","focus","isClosed","setLocation","href","setName","sameDomainWin","assertSameDomain","frameElement","setAttribute","getSerializedWindow","getID","setWindow","isPopup","open","getWindow","awaitWindow","matchWindow","proxyInstanceID","knownWindowInstanceID","unwrap","serialize","toProxyWindow","deserialize","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","on","meth","methodSource","listenForFunctionCalls","__id__","__name__","serializeMessage","serializers","serializer","serializePromise","deserializeMessage","deserializers","parse","deserializer","serializedPromise","deserializePromise","serializedFunction","getDeserializedFunction","opts","crossDomainFunctionWrapper","options","fireAndForget","__origin__","__source__","deserializeFunction","SEND_MESSAGE_STRATEGIES","sendMessage","serializedMessage","strategies","errors","strategyName","join","dom","forEach","postMessage","__DOMAIN_REGEX__","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","winQualifier","nameListeners","domainListeners","listener","regex","RECEIVE_MESSAGE_TYPES","sendResponse","ack","response","pathname","handleError","receiveMessage","event","receivedMessages","parsedMessage","parseMessage","requestListener","addRequestListener","listenersCollection","existingListener","regexListeners","regexListener","strDomain","errorHandler","once","normalizeDomain","childTimeout","actualParent","getAllChildFrames","getTop","isAncestor","awaitWindowHello","responseTimeout","validateOptions","targetDomain","logName","responseListener","addResponseListener","reqPromises","markResponseListenerErrored","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cancelled","max","loop","internalSerializeMessage","internalDeserializeMessage","createProxyWindow","setup","initialized","setupGlobalReceiveMessage","addEventListener","sourceElement","originalEvent","messageListener","removeEventListener","initHello","destroy","responseListeners","cancelResponseListeners","cleanUpWindow"],"mappings":"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","file":"post-robot.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"postRobot\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"postRobot\"] = factory();\n\telse\n\t\troot[\"postRobot\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win : CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup() : boolean {\n    return Boolean(getOpener(window));\n}\n\nexport function isIframe() : boolean {\n    return Boolean(getParent(window));\n}\n\nexport function isFullpage() : boolean {\n    return Boolean(!isIframe() && !isPopup());\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (noop(obj === obj) === '__unlikely_value__') { // eslint-disable-line no-self-compare\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (obj && obj.__cross_domain_utils_window_check__ === '__unlikely_value__') {\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\nexport function closeWindow(win : CrossDomainWindowType) {\n    try {\n        win.close();\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.Window === 'function' && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.constructor === 'function' && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers : Array<(mixed, promise? : ZalgoPromise<mixed>) => void> = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<mixed>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            // $FlowFixMe\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    result.then(res => {\n                        promise.resolve(res);\n                    }, err => {\n                        promise.reject(err);\n                    });\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            ZalgoPromise.resolve(prom).then(result => {\n                results[i] = result;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                promise.reject(err);\n            });\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : Object>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let name = this.name;\n                let entry = key[name];\n\n                if (entry && entry[0] === key) {\n                    entry[1] = value;\n                } else {\n                    Object.defineProperty(key, name, {\n                        value:    [ key, value ],\n                        writable: true\n                    });\n                }\n\n                return;\n\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let values = this.values;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[index] = value;\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n                \n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return entry[1];\n                }\n\n                return;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            return;\n        }\n\n        return this.values[index];\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    entry[0] = entry[1] = undefined;\n                }\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index !== -1) {\n            keys.splice(index, 1);\n            this.values.splice(index, 1);\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return true;\n                }\n\n                return false;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let index = safeIndexOf(this.keys, key);\n        return index !== -1;\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (m, p1) => {\n            return String.fromCharCode(parseInt(p1, 16));\n        }));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof atob === 'function') {\n        return decodeURIComponent(Array.prototype.map.call(atob(str), c => {\n            // eslint-disable-next-line prefer-template\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs<T>(args : Array<T>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\nexport function memoize<A, R, F : (...args : Array<A>) => R, X : { (...args : Array<A>) : R, displayName : string, reset : () => void }>(method : F, options : { time? : number, name? : string, thisNamespace? : boolean } = {}) : X {\n    let cacheMap = new WeakMap();\n\n    // $FlowFixMe\n    let memoizedFunction : X = function memoizedFunction(...args : Array<A>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    };\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    if (options.name) {\n        memoizedFunction.displayName = `${ options.name }:memoized`;\n    }\n\n    return memoizedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = ZalgoPromise.try(() => method.apply(this, arguments))\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return memoizedPromiseFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return promisifiedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    // $FlowFixMe\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    let result = cache[key] = logic(...args);\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    return function onceFunction() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (err && err.toString && typeof err.toString === 'function') {\n            // $FlowFixMe\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && item.toString && typeof item.toString === 'function') {\n        // $FlowFixMe\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    return function promiseDebouncedMethod() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (part === 'constructor' || part === 'prototype' || part === '__proto__') {\n                throw new Error(`Disallowed key: ${ part }`);\n            }\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function arrayFrom<T>(item : Iterable<T>) : Array<T> { // eslint-disable-line no-undef\n    return Array.prototype.slice.call(item);\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Array<mixed> | Object> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result : Array<mixed> = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    return function debounceWrapper() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.pop();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n                            \n    return thing;\n}\n                            \nexport function unique(arr : $ReadOnlyArray<string>) : $ReadOnlyArray<string> {\n    const result = {};\n    for (const item of arr) {\n        // eslint-disable-next-line const-immutable/no-mutation\n        result[item] = true;\n    }\n    return Object.keys(result);\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID, arrayFrom } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<HTMLElement> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<window.HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    options = {\n        top,\n        left,\n        width,\n        height,\n        status:     1,\n        toolbar:    0,\n        menubar:    0,\n        resizable:  1,\n        scrollbars: 1,\n        ...options\n    };\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key]) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    for (const child of arrayFrom(documentElement.children)) {\n        documentElement.removeChild(child);\n    }\n\n    for (const child of arrayFrom(el.children)) {\n        documentElement.appendChild(child);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            border:          'none',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n    \n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function getResourceLoadTime(url : string) : ?number {\n\n    if (!enablePerformance()) {\n        return;\n    }\n\n    if (!window.performance || typeof window.performance.getEntries !== 'function') {\n        return;\n    }\n\n    const entries = window.performance.getEntries();\n\n    for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n\n        if (entry && entry.name && entry.name.indexOf(url) === 0 && typeof entry.duration === 'number') {\n            return Math.floor(entry.duration);\n        }\n    }\n}\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT = __TEST__ ? 2000 : -1;\nexport const RESPONSE_CYCLE_TIME = 500;\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    if (win !== window) {\n        return win[__POST_ROBOT__.__GLOBAL_KEY__];\n    }\n    const global : Object = win[__POST_ROBOT__.__GLOBAL_KEY__] = win[__POST_ROBOT__.__GLOBAL_KEY__] || {};\n    return global;\n}\n\nexport function deleteGlobal() {\n    delete window[__POST_ROBOT__.__GLOBAL_KEY__];\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction listenForHello({ on } : { on : OnType }) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        getHelloPromise(source).resolve({ win: source, domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            getHelloPromise(win).resolve({ win, domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(noop);\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code });\n}\n\nexport function deserializeError({ message, stack, code } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, closeWindow,\n    type DomainMatcher, getOpener, WINDOW_TYPE, isWindow, assertSameDomain } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedWindowType = {|\n    id : string,\n    getType : () => ZalgoPromise<$Values<typeof WINDOW_TYPE>>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    getName : () => ZalgoPromise<?string>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nfunction getSerializedWindow(winPromise : ZalgoPromise<CrossDomainWindowType>, { send } : { send : SendType }) : SerializedWindowType {\n    let windowName;\n\n    const id = uniqueID();\n    \n    return {\n        id,\n        getType: () => winPromise.then(win => {\n            return getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME;\n        }),\n        getInstanceID: memoizePromise(() => winPromise.then(win => getWindowInstanceID(win, { send }))),\n        close:         () => winPromise.then(closeWindow),\n        getName:       () => winPromise.then(win => {\n            if (isWindowClosed(win)) {\n                return;\n            }\n\n            return windowName;\n        }),\n        focus:   () => winPromise.then(win => {\n            win.focus();\n        }),\n        isClosed: () => winPromise.then(win => {\n            return isWindowClosed(win);\n        }),\n        setLocation: (href) => winPromise.then(win => {\n            if (isSameDomain(win)) {\n                try {\n                    if (win.location && typeof win.location.replace === 'function') {\n                        // $FlowFixMe\n                        win.location.replace(href);\n                        return;\n                    }\n                } catch (err) {\n                    // pass\n                }\n            }\n\n            win.location = href;\n        }),\n        setName: (name) => winPromise.then(win => {\n            if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                linkWindow({ win, name });\n            }\n\n            const sameDomainWin = assertSameDomain(win);\n\n            sameDomainWin.name = name;\n\n            if (sameDomainWin.frameElement) {\n                sameDomainWin.frameElement.setAttribute('name', name);\n            }\n\n            windowName = name;\n        })\n    };\n}\n\nexport class ProxyWindow {\n\n    id : string\n    isProxyWindow : true = true\n    serializedWindow : SerializedWindowType\n    actualWindow : ?CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n    name : string\n\n    constructor({ send, win, serializedWindow } : { win? : CrossDomainWindowType, serializedWindow? : SerializedWindowType, send : SendType }) {\n        this.actualWindowPromise = new ZalgoPromise();\n        this.serializedWindow = serializedWindow || getSerializedWindow(this.actualWindowPromise, { send });\n        globalStore('idToProxyWindow').set(this.getID(), this);\n        if (win) {\n            this.setWindow(win);\n        }\n    }\n\n    getID() : string {\n        return this.serializedWindow.id;\n    }\n\n    getType() : ZalgoPromise<$Values<typeof WINDOW_TYPE>> {\n        return this.serializedWindow.getType();\n    }\n\n    isPopup() : boolean {\n        return this.getType() === WINDOW_TYPE.POPUP;\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setLocation(href).then(() => this);\n    }\n\n    getName() : ZalgoPromise<?string> {\n        return this.serializedWindow.getName();\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setName(name).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.close().then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.all([\n            this.isPopup() && this.getName().then(name => {\n                if (name) {\n                    window.open('', name);\n                }\n            }),\n            this.serializedWindow.focus()\n        ]).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return this.serializedWindow.isClosed();\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType) {\n        this.actualWindow = win;\n        this.actualWindowPromise.resolve(this.actualWindow);\n        windowStore('winToProxyWindow').set(win, this);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.hash({\n                proxyInstanceID:       this.getInstanceID(),\n                knownWindowInstanceID: getWindowInstanceID(win, { send })\n            }).then(({ proxyInstanceID, knownWindowInstanceID }) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win);\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        return this.serializedWindow.getInstanceID();\n    }\n\n    shouldClean() : boolean {\n        return Boolean(this.actualWindow && isWindowClosed(this.actualWindow));\n    }\n\n    serialize() : SerializedWindowType {\n        return this.serializedWindow;\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : SerializedWindowType {\n        cleanupProxyWindows();\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedWindowType, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n        return globalStore('idToProxyWindow').get(serializedWindow.id) || new ProxyWindow({ serializedWindow, send });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        const actualWindow : CrossDomainWindowType = win;\n        \n        return windowStore('winToProxyWindow').get(actualWindow) || new ProxyWindow({ win: actualWindow, send });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedWindowType>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedWindowType, { send } : { send : SendType }) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { send });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : { win? : CrossDomainWindowType, domain? : string }) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\ntype SendMessageType = {|\n    (string) : void,\n    fireAndForget : (string) => void\n|};\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : SendMessageType) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction listenForFunctionCalls({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ data.name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source, { send }).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    // $FlowFixMe\n                    if (err.stack) {\n                        // $FlowFixMe\n                        err.stack = `Remote call to ${ name }()\\n\\n${ err.stack }`;\n                    }\n\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype SerializableFunction<T> = {\n    () : ZalgoPromise<T> | T,\n    __id__? : string,\n    __name__? : string\n};\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : SerializableFunction<T>, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedFunction {\n    listenForFunctionCalls({ on, send });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    const name = val.__name__ || val.name || key;\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }, { send } : { send : SendType }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    // $FlowFixMe\n                    const options = { domain: origin, fireAndForget: opts.fireAndForget };\n                    const args = Array.prototype.slice.call(arguments);\n\n                    return send(win, MESSAGE_NAME.METHOD, { id, name, args }, options)\n                        .then(res => {\n                            if (!opts.fireAndForget) {\n                                return res.data.result;\n                            }\n                        });\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : { on : OnType, send : SendType }) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { on, send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { on, send } : { on : OnType, send : SendType }) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { on, send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, type DomainMatcher, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\nexport const SEND_MESSAGE_STRATEGIES = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (__TEST__) {\n            if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n                if (window.location.protocol === PROTOCOL.FILE) {\n                    return WILDCARD;\n                }\n\n                if (!isActuallySameDomain(win)) {\n                    throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n                }\n\n                // $FlowFixMe\n                return getActualDomain(win);\n\n            }\n        }\n        \n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            return;\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            return;\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { isWindowClosed, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, stringifyError } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nexport function sendMessage(win : CrossDomainWindowType, domain : DomainMatcher, message : Message, { on, send } : { on : OnType, send : SendType }) {\n    if (isWindowClosed(win)) {\n        throw new Error('Window is closed');\n    }\n    \n    const serializedMessage = serializeMessage(win, domain, {\n        [ __POST_ROBOT__.__GLOBAL_KEY__ ]: {\n            id:     uniqueID(),\n            origin: getDomain(window),\n            ...message\n        }\n    }, { on, send });\n\n    const strategies = Object.keys(SEND_MESSAGE_STRATEGIES);\n    const errors = [];\n\n    for (const strategyName of strategies) {\n        try {\n            SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n        } catch (err) {\n            errors.push(err);\n        }\n    }\n\n    if (errors.length === strategies.length) {\n        throw new Error(`All post-robot messaging strategies failed:\\n\\n${ errors.map(stringifyError).join('\\n\\n') }`);\n    }\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean,\n    cancelled? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function cancelResponseListeners() {\n    const responseListeners = globalStore('responseListeners');\n    for (const hash of responseListeners.keys()) {\n        const listener = responseListeners.get(hash);\n        if (listener) {\n            listener.cancelled = true;\n        }\n        responseListeners.del(hash);\n    }\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) }) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const nameListeners = requestListeners.getOrSet(win, () => ({}));\n    const domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    const strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                delete nameListeners[name];\n            }\n\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport const RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : { on : OnType, send : SendType }) : ZalgoPromise<void> {\n\n        const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (__DEBUG__) {\n            // eslint-disable-next-line no-console\n            console.info('receive::req', logName, origin, '\\n\\n', message.data);\n        }\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, ack? : $Values<typeof MESSAGE_ACK>, response = {}) {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            if (__DEBUG__ && type !== MESSAGE_TYPE.ACK) {\n                if (ack === MESSAGE_ACK.SUCCESS) {\n                    // $FlowFixMe\n                    console.info('respond::res', logName, origin, '\\n\\n', response.data);  // eslint-disable-line no-console\n                } else if (ack === MESSAGE_ACK.ERROR) {\n                    // $FlowFixMe\n                    console.error('respond::err', logName, origin, '\\n\\n', response.error); // eslint-disable-line no-console\n                }\n            }\n\n            // $FlowFixMe\n            sendMessage(source, origin, {\n                type,\n                ack,\n                hash:   message.hash,\n                name:   message.name,\n                ...response\n            }, { on, send });\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                const data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.SUCCESS, { data });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.ERROR, { error });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Ack source does not match registered window`);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Response source does not match registered window`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            if (__DEBUG__) {\n                console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n            }\n\n            options.promise.reject(message.error);\n\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            if (__DEBUG__) {\n                console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n            }\n\n            options.promise.resolve({ source, origin, data: message.data });\n        }\n    }\n};\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow, PROTOCOL  } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string, { on, send } : { on : OnType, send : SendType }) : ?Object {\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[__POST_ROBOT__.__GLOBAL_KEY__];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : { on : OnType, send : SendType }) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    if (!window || window.closed) {\n        throw new Error(`Message recieved in closed window`);\n    }\n\n    try {\n        if (!event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const message = parseMessage(data, source, origin, { on, send });\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    if (message.origin.indexOf(PROTOCOL.FILE) === 0) {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message, { on, send });\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : { on : OnType, send : SendType }) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : { origin : string }\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : { on : OnType, send : SendType }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    const source = event.source || event.sourceElement;\n    let origin = event.origin || (event.originalEvent && event.originalEvent.origin);\n    const data = event.data;\n\n    if (origin === 'null') {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    if (!source) {\n        return;\n    }\n\n    if (!origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage({ source, origin, data }, { on, send });\n}\n\nexport function listenForMessages({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore().getOrSet('postMessageListener', () => {\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n\nexport function stopListenForMessages() {\n    const listener = globalStore().get('postMessageListener');\n    if (listener) {\n        listener.cancel();\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    options = options || {};\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    const win = options.window;\n    const domain = options.domain;\n\n    const listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    const requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function once(name : string, options? : ServerOptionsType | HandlerType, handler? : HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n    \n    // $FlowFixMe\n    options = options || {};\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    promise.cancel = listener.cancel;\n    return promise;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop, safeInterval, stringify } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN, RESPONSE_CYCLE_TIME } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport type { SendType } from '../types';\n\nimport { on } from './on';\n\nfunction validateOptions(name : string, win : CrossDomainWindowType, domain : ?DomainMatcher) {\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (domain) {\n        if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n            throw new TypeError(`Expected domain to be a string, array, or regex`);\n        }\n    }\n\n    if (isWindowClosed(win)) {\n        throw new Error('Target window is closed');\n    }\n}\n\nfunction normalizeDomain(win : CrossDomainWindowType, domain : DomainMatcher, childTimeout : number, { send } : { send : SendType }) : ZalgoPromise<string | $ReadOnlyArray<string>> {\n    return ZalgoPromise.try(() => {\n        if (isAncestor(window, win)) {\n            return awaitWindowHello(win, childTimeout);\n        } else if (isRegex(domain)) {\n            // $FlowFixMe\n            return sayHello(win, { send });\n        } else {\n            return { domain };\n        }\n    // $FlowFixMe\n    }).then(({ domain: normalizedDomain }) => {\n\n        // $FlowFixMe\n        return normalizedDomain;\n    });\n}\n\nexport const send : SendType = (win, name, data, options) => {\n    options = options || {};\n    let domain = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    // $FlowFixMe\n    return ZalgoPromise.try(() => {\n        validateOptions(name, win, domain);\n        return normalizeDomain(win, domain, childTimeout, { send });\n    }).then(targetDomain => {\n\n        if (!matchDomain(domain, targetDomain)) {\n            throw new Error(`Domain ${ stringify(domain) } does not match ${ stringify(targetDomain) }`);\n        }\n\n        domain = targetDomain;\n\n        const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n        if (__DEBUG__) {\n            console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n        }\n\n        const promise = new ZalgoPromise();\n        const hash = `${ name }_${ uniqueID() }`;\n\n        if (!fireAndForget) {\n            const responseListener : ResponseListenerType = { name, win, domain, promise };\n            addResponseListener(hash, responseListener);\n\n            const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n            reqPromises.push(promise);\n\n            promise.catch(() => {\n                markResponseListenerErrored(hash);\n                deleteResponseListener(hash);\n            });\n\n            const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n            const totalResTimeout = responseTimeout;\n\n            let ackTimeout = totalAckTimeout;\n            let resTimeout = totalResTimeout;\n        \n            const interval = safeInterval(() => {\n                if (isWindowClosed(win)) {\n                    return promise.reject(new Error(`Window closed for ${ name } before ${ responseListener.ack ? 'response' : 'ack' }`));\n                }\n\n                if (responseListener.cancelled) {\n                    return promise.reject(new Error(`Response listener was cancelled for ${ name }`));\n                }\n\n                ackTimeout = Math.max(ackTimeout - RESPONSE_CYCLE_TIME, 0);\n                if (resTimeout !== -1) {\n                    resTimeout = Math.max(resTimeout - RESPONSE_CYCLE_TIME, 0);\n                }\n\n                if (!responseListener.ack && ackTimeout === 0) {\n                    return promise.reject(new Error(`No ack for postMessage ${ logName } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                } else if (resTimeout === 0) {\n                    return promise.reject(new Error(`No response for postMessage ${ logName } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                }\n            }, RESPONSE_CYCLE_TIME);\n\n            promise.finally(() => {\n                interval.cancel();\n                reqPromises.splice(reqPromises.indexOf(promise, 1));\n            }).catch(noop);\n        }\n\n        sendMessage(win, domain, {\n            type: MESSAGE_TYPE.REQUEST,\n            hash,\n            name,\n            data,\n            fireAndForget\n        }, { on, send });\n    \n        return fireAndForget ? promise.resolve() : promise;\n    });\n};\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, stopListenForMessages, receiveMessage, setupGlobalReceiveMessage, cancelResponseListeners } from './drivers';\nimport { getGlobal, deleteGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function createProxyWindow(win? : CrossDomainWindowType) : ProxyWindow {\n    return new ProxyWindow({ send, win });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        setupGlobalReceiveMessage({ on, send });\n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n    }\n}\n\nexport function destroy() {\n    cancelResponseListeners();\n    stopListenForMessages();\n    deleteGlobal();\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window cleaned up before response`)).catch(noop);\n    }\n}\n","/* @flow */\n\nimport { setup } from './setup';\nimport { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge, needsBridgeForBrowser, hasBridge,\n    needsBridgeForWin, needsBridgeForDomain, destroyBridges } from './bridge';\n\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\n\nexport * from './types';\nexport { ProxyWindow } from './serialize';\nexport { setup, destroy, serializeMessage, deserializeMessage, createProxyWindow, toProxyWindow } from './setup';\nexport { on, once, send } from './public';\nexport { markWindowKnown } from './lib';\nexport { cleanUpWindow } from './clean';\nexport let bridge;\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n    bridge = { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge,\n        needsBridgeForBrowser, hasBridge, needsBridgeForWin, needsBridgeForDomain, destroyBridges };\n}\n\nif (__POST_ROBOT__.__AUTO_SETUP__) {\n    setup();\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from 'zalgo-promise/src';\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\n// export something to force webpack to see this as an ES module\nexport const TYPES = true;\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type CancelableType = {\n    cancel : () => void\n};\n\nexport type ErrorHandlerType = (err : mixed) => void;\n\nexport type HandlerType = ({\n    source : CrossDomainWindowType,\n    origin : string,\n    data : any // eslint-disable-line flowtype/no-weak-types\n}) => (void | any | ZalgoPromise<any>); // eslint-disable-line flowtype/no-weak-types\n\nexport type ServerOptionsType = {|\n    handler? : ?HandlerType,\n    errorHandler? : ?ErrorHandlerType,\n    window? : CrossDomainWindowType,\n    name? : ?string,\n    domain? : ?DomainMatcher,\n    once? : ?boolean,\n    errorOnClose? : ?boolean\n|};\n\nexport type OnType = (\n    name : string,\n    options : ServerOptionsType | HandlerType,\n    handler : ?HandlerType\n) => CancelableType;\n\ntype RegularRequestOptionsType = {|\n    domain? : ?DomainMatcher,\n    fireAndForget? : false,\n    timeout? : ?number\n|};\n\ntype FireAndForgetRequestOptionsType = {|\n    domain? : ?DomainMatcher,\n    fireAndForget : true,\n    timeout? : ?number\n|};\n\nexport type RequestOptionsType = RegularRequestOptionsType | FireAndForgetRequestOptionsType;\n\nexport type ResponseMessageEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : Object\n|};\n\ntype RegularSendType = (\n    win : CrossDomainWindowType,\n    name : string,\n    data : ?Object,\n    options? : RegularRequestOptionsType\n) => ZalgoPromise<ResponseMessageEvent>;\n\ntype FireAndForgetSendType = (\n    win : CrossDomainWindowType,\n    name : string,\n    data : ?Object,\n    options? : FireAndForgetRequestOptionsType\n) => ZalgoPromise<void>;\n\nexport type SendType = RegularSendType & FireAndForgetSendType;\n\nexport type MessageEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string\n|};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type CrossDomainFunctionType<A, R> = {\n    (...args : A) : ZalgoPromise<R>,\n    fireAndForget : (...args : A) => ZalgoPromise<void>,\n    __id__? : string,\n    __name__? : string\n};\n\nexport type ReceiveMessageType = (MessageEvent, { on : OnType, send : SendType }) => void;\n"],"sourceRoot":""}