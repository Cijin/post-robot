{"version":3,"sources":["webpack://postRobot/webpack/universalModuleDefinition","webpack://postRobot/webpack/bootstrap","webpack://postRobot/./node_modules/cross-domain-utils/src/util.js","webpack://postRobot/./node_modules/cross-domain-utils/src/constants.js","webpack://postRobot/./node_modules/cross-domain-utils/src/utils.js","webpack://postRobot/./node_modules/zalgo-promise/src/utils.js","webpack://postRobot/./node_modules/zalgo-promise/src/exceptions.js","webpack://postRobot/./node_modules/zalgo-promise/src/flush.js","webpack://postRobot/./node_modules/zalgo-promise/src/promise.js","webpack://postRobot/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://postRobot/./node_modules/belter/src/util.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://postRobot/./node_modules/belter/src/dom.js","webpack://postRobot/./src/conf/config.js","webpack://postRobot/./src/conf/constants.js","webpack://postRobot/./src/global.js","webpack://postRobot/./src/lib/hello.js","webpack://postRobot/./src/lib/windows.js","webpack://postRobot/./node_modules/universal-serialize/src/constants.js","webpack://postRobot/./node_modules/universal-serialize/src/common.js","webpack://postRobot/./node_modules/universal-serialize/src/serialize.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/function.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/error.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/promise.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/regex.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/date.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/array.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/object.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/string.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/number.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/null.js","webpack://postRobot/./node_modules/universal-serialize/src/deserialize.js","webpack://postRobot/./src/bridge/common.js","webpack://postRobot/./src/bridge/parent.js","webpack://postRobot/./src/bridge/setup.js","webpack://postRobot/./src/bridge/bridge.js","webpack://postRobot/./src/bridge/child.js","webpack://postRobot/./src/serialize/window.js","webpack://postRobot/./src/serialize/function.js","webpack://postRobot/./src/serialize/serialize.js","webpack://postRobot/./src/serialize/promise.js","webpack://postRobot/./src/drivers/send/strategies.js","webpack://postRobot/./src/drivers/send/index.js","webpack://postRobot/./src/lib/compat.js","webpack://postRobot/./src/drivers/listeners.js","webpack://postRobot/./src/drivers/receive/types.js","webpack://postRobot/./src/index.js","webpack://postRobot/./src/drivers/receive/index.js","webpack://postRobot/./src/public/on.js","webpack://postRobot/./src/public/send.js","webpack://postRobot/./src/setup.js","webpack://postRobot/./src/clean.js","webpack://postRobot/./src/types.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isRegex","item","toString","PROTOCOL","MOCK","FILE","ABOUT","WILDCARD","IE_WIN_ACCESS_ERROR","isAboutProtocol","win","window","location","protocol","getParent","parent","err","getOpener","opener","canReadFromWindow","href","getActualDomain","Error","host","getDomain","domain","mockDomain","indexOf","isActuallySameDomain","desc","getOwnPropertyDescriptor","isSameDomain","isAncestorParent","child","childParent","result","push","getParents","getFrames","frames","len","length","frame","getAllChildFrames","_i3","_getFrames2","_i5","_getAllChildFrames2","childFrame","getTop","top","_i7","_getAllChildFrames4","getAllFramesInWindow","concat","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getUserAgent","navigator","mockUserAgent","userAgent","getFrameByName","winFrames","_i9","isOpener","getAncestor","anyMatch","collection1","collection2","_i17","item1","_i19","isSameTopWindow","win1","win2","top1","top2","allFrames1","allFrames2","opener1","opener2","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","getDomainFromUrl","url","split","slice","join","isWindow","obj","Window","__cross_domain_utils_window_check__","isPromise","Promise","constructor","then","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","_this","resolved","rejected","errorHandled","error","handlers","dispatching","stack","isAsync","res","reject","_proto","dispatch","_this2","setTimeout","j","dispatchPossiblyUnhandledError","asyncReject","_this3","_loop","_handlers$i","onSuccess","onError","catch","undefined","finally","onFinally","try","timeout","time","_this4","clearTimeout","toPromise","TypeError","all","promises","count","results","_loop2","prom","hash","keys","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","apply","delay","flush","_extends","assign","target","arguments","source","objectIDs","counter","Date","now","CrossDomainSafeWeakMap","weakmap","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","uniqueID","chars","replace","charAt","floor","str","btoa","Buffer","from","base64encode","toISOString","toLowerCase","noop","val","CHILD_WINDOW_TIMEOUT","ACK_TIMEOUT","ACK_TIMEOUT_KNOWN","RES_TIMEOUT","MESSAGE_TYPE","REQUEST","RESPONSE","ACK","MESSAGE_NAME","METHOD","HELLO","OPEN_TUNNEL","BRIDGE_NAME_PREFIX","SERIALIZATION_TYPE","CROSS_DOMAIN_ZALGO_PROMISE","CROSS_DOMAIN_FUNCTION","CROSS_DOMAIN_WINDOW","getGlobal","getObj","globalStore","defStore","store","storeKey","defVal","del","reset","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","getHelloPromise","sayHello","_ref3","send","instanceID","_ref4","data","getWindowInstanceID","_ref5","_ref6","awaitWindowHello","markWindowKnown","TYPE","FUNCTION","ERROR","PROMISE","REGEX","DATE","ARRAY","OBJECT","STRING","NUMBER","BOOLEAN","NULL","UNDEFINED","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","_SERIALIZER","_ref","code","toJSON","defaultSerializers","DESERIALIZER","_DESERIALIZER","_ref2","RegExp","defaultDeserializers","needsBridgeForBrowser","needsBridgeForWin","needsBridgeForDomain","needsBridge","getBridgeName","sanitizedDomain","isBridge","documentBodyReady","document","body","interval","setInterval","clearInterval","registerRemoteWindow","findRemoteWindow","remoteWinPromise","registerRemoteSendMessage","sendMessage","remoteWin","remoteDomain","fireAndForget","rejectRemoteSendMessage","linkWindow","popupWindowsByName","popupWindowsByWin","_i2","_popupWindowsByName$k2","winName","details","setupBridge","windowOpen","on","receiveMessage","open","options","last","normalizeMockUrl","bridgePromise","bridge","winDetails","listenForOpenTunnel","openTunnelToParent","canary","tunnelWindows","parentWindow","id","_tunnelWindows$keys2","tunnelWindow","cleanTunnelWindows","addTunnelWindow","setupOpenTunnelToParent","openTunnelToOpener","cleanupProxyWindows","idToProxyWindow","_idToProxyWindow$keys2","shouldClean","ProxyWindow","serializedWindow","actualWindow","isProxyWindow","actualWindowPromise","setWindow","cache","memoizedPromiseFunction","_len2","_key2","subkey","uid","getObjectID","serializeArgs","memoizePromise","getType","isPopup","isIframe","setLocation","setName","frameElement","setAttribute","close","focus","isClosed","_this5","getWindow","awaitWindow","matchWindow","_this6","unwrap","serialize","toProxyWindow","deserialize","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","meth","methodSource","listenForFunctionCalls","__id__","__name__","serializeMessage","_serialize","serializers","serializer","serializePromise","serializeWindow","deserializeMessage","_deserialize","deserializers","parse","deserializer","serializedPromise","serializedFunction","getDeserializedFunction","opts","crossDomainFunctionWrapper","_arguments","__origin__","__source__","deserializeFunction","_ref7","deserializeWindow","SEND_MESSAGE_STRATEGIES","_serializeMessage","serializedMessage","success","_Object$keys2","strategyName","dom","forEach","postMessage","messagingChild","messagingParent","sendBridgeMessage","foreignGlobal","__DOMAIN_REGEX__","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","winQualifier","nameListeners","domainListeners","_i4","_domainListeners$__DO2","_domainListeners$__DO3","regex","listener","RECEIVE_MESSAGE_TYPES","_RECEIVE_MESSAGE_TYPE","sendResponse","ack","response","pathname","handleError","event","receivedMessages","parsedMessage","parseMessage","requestListener","addRequestListener","listenersCollection","_i6","_win2","_i8","_i10","_domain2","_i12","existingListener","regexListeners","regexListener","strDomain","errorHandler","once","responseTimeout","childTimeout","reqPromises","requestPromise","actualParent","_i15","_getFrames8","isAncestor","_temp","hasResult","markResponseListenerErrored","responseListener","addResponseListener","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cycleTime","cycle","max","min","internalSerializeMessage","internalDeserializeMessage","setup","initialized","messageEvent","sourceElement","originalEvent","messageListener","addEventListener","removeEventListener","listenForMessages","initHello","cleanUpWindow","_requestPromises$get2","__webpack_exports__","src_bridge","promise_ZalgoPromise","window_ProxyWindow","setup_serializeMessage","setup_deserializeMessage","setup_toProxyWindow","on_on","on_once","send_send","openBridge","bridges","bridgeFrames","iframe","createElement","src","openBridgeFrame","appendChild","linkUrl","hasBridge","destroyBridges","_bridgeFrames$keys2","removeChild"],"mappings":"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","file":"post-robot.ie.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"postRobot\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"postRobot\"] = factory();\n\telse\n\t\troot[\"postRobot\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win : CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup() : boolean {\n    return Boolean(getOpener(window));\n}\n\nexport function isIframe() : boolean {\n    return Boolean(getParent(window));\n}\n\nexport function isFullpage() : boolean {\n    return Boolean(!isIframe() && !isPopup());\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        noop(obj === obj);  // eslint-disable-line no-self-compare\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        noop(obj && obj.__cross_domain_utils_window_check__);\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && window.Window && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && window.constructor && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<*>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    result.then(res => {\n                        promise.resolve(res);\n                    }, err => {\n                        promise.reject(err);\n                    });\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : [*] | [*, *] | [*, *, *] | [*, *, *, *] | [*, *, *, *, *] | [*, *, *, *, *, *] | [*, *, *, *, *, *, *] | [*, *, *, *, *, *, *, *] | [*, *, *, *, *, *, *, *, *] | Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            ZalgoPromise.resolve(prom).then(result => {\n                results[i] = result;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                promise.reject(err);\n            });\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : { [string] : * }>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nlet defineProperty = Object.defineProperty;\nlet counter = Date.now() % 1e9;\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        counter += 1;\n\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__${ counter }`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let values = this.values;\n            let index = safeIndexOf(keys, key);\n\n            if (index === -1) {\n                keys.push(key);\n                values.push(value);\n            } else {\n                values[index] = value;\n            }\n\n        } else {\n\n            let name = this.name;\n            let entry = key[name];\n\n            if (entry && entry[0] === key) {\n                entry[1] = value;\n            } else {\n                defineProperty(key, name, {\n                    value:    [ key, value ],\n                    writable: true\n                });\n            }\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let index = safeIndexOf(keys, key);\n\n            if (index === -1) {\n                return;\n            }\n\n            return this.values[index];\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                return entry[1];\n            }\n        }\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let index = safeIndexOf(keys, key);\n\n            if (index !== -1) {\n                keys.splice(index, 1);\n                this.values.splice(index, 1);\n            }\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                entry[0] = entry[1] = undefined;\n            }\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let index = safeIndexOf(this.keys, key);\n            return index !== -1;\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                return true;\n            }\n\n            return false;\n        }\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(str);\n    } else if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof window !== 'undefined' && typeof window.atob === 'function') {\n        return window.atob(str);\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs(args : Array<mixed>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoize<R>(method : (...args : Array<any>) => R, options : { time? : number, name? : string, thisNamespace? : boolean } = {}) : ((...args : Array<any>) => R) {\n    let cacheMap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedFunction(...args : Array<any>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    }\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    if (options.name) {\n        memoizedFunction.displayName = `${ options.name }:memoized`;\n    }\n\n    return memoizedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = method.apply(this, arguments)\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return memoizedPromiseFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return promisifiedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    let result = cache[key] = logic(...args);\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    return function onceFunction() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (typeof err.toString === 'function') {\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && typeof item.toString === 'function') {\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    return function promiseDebouncedMethod() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Object | Array<mixed>> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    return function debounceWrapper() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.pop();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n\n    return thing;\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<Element> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : Element, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<window.HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    options = {\n        top,\n        left,\n        width,\n        height,\n        status:     1,\n        toolbar:    0,\n        menubar:    0,\n        resizable:  1,\n        scrollbars: 1,\n        ...options\n    };\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key]) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    while (documentElement.children && documentElement.children.length) {\n        documentElement.removeChild(documentElement.children[0]);\n    }\n\n    while (el.children.length) {\n        documentElement.appendChild(el.children[0]);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n\n    if (frame.contentWindow) {\n        return ZalgoPromise.resolve(frame.contentWindow);\n    }\n\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement, attempts : number = 3) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            frameBorder:       '0',\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    \n        // $FlowFixMe\n        let win = frame.contentWindow;\n    \n        if (win) {\n            try {\n                // $FlowFixMe\n                noop(win.name);\n            } catch (err) {\n                el.removeChild(frame);\n    \n                if (!attempts) {\n                    throw new Error(`Frame is cross-domain: ${ err.stack }`);\n                }\n    \n                return iframe(options, container, attempts - 1);\n            }\n        }\n    }\n\n    if (options.url || window.navigator.userAgent.match(/MSIE|Edge/i)) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nfunction isValidAnimation(element : HTMLElement, name : string) : boolean {\n\n    let CSSRule = window.CSSRule;\n\n    const KEYFRAMES_RULE = CSSRule.KEYFRAMES_RULE || CSSRule.WEBKIT_KEYFRAMES_RULE || CSSRule.MOZ_KEYFRAMES_RULE ||\n        CSSRule.O_KEYFRAMES_RULE || CSSRule.MS_KEYFRAMES_RULE;\n\n    let stylesheets = element.ownerDocument.styleSheets;\n\n    try {\n        for (let i = 0; i < stylesheets.length; i++) {\n\n            // $FlowFixMe\n            let cssRules = stylesheets[i].cssRules;\n\n            if (!cssRules) {\n                continue;\n            }\n\n            for (let j = 0; j < cssRules.length; j++) {\n\n                let cssRule = cssRules[j];\n\n                if (!cssRule) {\n                    continue;\n                }\n\n                if (cssRule.type === KEYFRAMES_RULE && cssRule.name === name) {\n                    return true;\n                }\n            }\n        }\n    } catch (err) {\n\n        return false;\n    }\n\n\n    return false;\n}\n\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el || !isValidAnimation(el, name)) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT = __TEST__ ? 2000 : -1;\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    if (win !== window) {\n        return win[__POST_ROBOT__.__GLOBAL_KEY__];\n    }\n    const global : Object = win[__POST_ROBOT__.__GLOBAL_KEY__] = win[__POST_ROBOT__.__GLOBAL_KEY__] || {};\n    return global;\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\n// $FlowFixMe\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\n// $FlowFixMe\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction listenForHello({ on } : { on : OnType }) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        getHelloPromise(source).resolve({ win: source, domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            getHelloPromise(win).resolve({ win, domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(noop);\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code });\n}\n\nexport function deserializeError({ message, stack, code } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : { win? : CrossDomainWindowType, domain? : string }) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : (message : string) => void) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, getFrameByName, isWindowClosed, getDomainFromUrl, normalizeMockUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { BRIDGE_TIMEOUT, MESSAGE_NAME } from '../conf';\nimport { awaitWindowHello } from '../lib';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { getBridgeName, documentBodyReady, registerRemoteSendMessage, registerRemoteWindow } from './common';\n\nexport function listenForOpenTunnel({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n\n    on(MESSAGE_NAME.OPEN_TUNNEL, ({ source, origin, data }) => {\n        const bridgePromise = globalStore('bridges').get(origin);\n\n        if (!bridgePromise) {\n            throw new Error(`Can not find bridge promise for domain ${ origin }`);\n        }\n\n        return bridgePromise.then(bridge => {\n\n            // $FlowFixMe\n            if (source !== bridge) {\n                // $FlowFixMe\n                throw new Error(`Message source does not matched registered bridge for domain ${ origin }`);\n            }\n\n            if (!data.name) {\n                throw new Error(`Register window expected to be passed window name`);\n            }\n\n            if (!data.sendMessage) {\n                throw new Error(`Register window expected to be passed sendMessage method`);\n            }\n\n            if (!popupWindowsByName.has(data.name)) {\n                throw new Error(`Window with name ${ data.name } does not exist, or was not opened by this window`);\n            }\n\n            // $FlowFixMe\n            if (!popupWindowsByName.get(data.name).domain) {\n                throw new Error(`We do not have a registered domain for window ${ data.name }`);\n            }\n\n            // $FlowFixMe\n            if (popupWindowsByName.get(data.name).domain !== origin) {\n                // $FlowFixMe\n                throw new Error(`Message origin ${ origin } does not matched registered window origin ${ popupWindowsByName.get(data.name).domain }`);\n            }\n\n            // $FlowFixMe\n            registerRemoteSendMessage(popupWindowsByName.get(data.name).win, origin, data.sendMessage);\n\n            return {\n                sendMessage(message) {\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    const winDetails = popupWindowsByName.get(data.name);\n\n                    if (!winDetails) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: winDetails.domain,\n                            source: winDetails.win\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n            };\n        });\n    });\n}\n\nfunction openBridgeFrame(name : string, url : string) : HTMLIFrameElement {\n\n    const iframe = document.createElement(`iframe`);\n\n    iframe.setAttribute(`name`, name);\n    iframe.setAttribute(`id`,   name);\n\n    iframe.setAttribute(`style`, `display: none; margin: 0; padding: 0; border: 0px none; overflow: hidden;`);\n    iframe.setAttribute(`frameborder`, `0`);\n    iframe.setAttribute(`border`, `0`);\n    iframe.setAttribute(`scrolling`, `no`);\n    iframe.setAttribute(`allowTransparency`, `true`);\n\n    iframe.setAttribute(`tabindex`, `-1`);\n    iframe.setAttribute(`hidden`, `true`);\n    iframe.setAttribute(`title`, ``);\n    iframe.setAttribute(`role`, `presentation`);\n\n    iframe.src = url;\n\n    return iframe;\n}\n\nexport function hasBridge(url : string, domain : string) : boolean {\n    const bridges = globalStore('bridges');\n    return bridges.has(domain || getDomainFromUrl(url));\n}\n\nexport function openBridge(url : string, domain : string) : ZalgoPromise<CrossDomainWindowType> {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n    \n    domain = domain || getDomainFromUrl(url);\n    \n    return bridges.getOrSet(domain, () => ZalgoPromise.try(() => {\n\n        if (getDomain() === domain) {\n            throw new Error(`Can not open bridge on the same domain as current domain: ${ domain }`);\n        }\n\n        const name  = getBridgeName(domain);\n        const frame = getFrameByName(window, name);\n\n        if (frame) {\n            throw new Error(`Frame with name ${ name } already exists on page`);\n        }\n\n        const iframe = openBridgeFrame(name, url);\n        bridgeFrames.set(domain, iframe);\n\n        return documentBodyReady.then(body => {\n\n            body.appendChild(iframe);\n            const bridge = iframe.contentWindow;\n\n            return new ZalgoPromise((resolve, reject) => {\n\n                iframe.addEventListener('load', resolve);\n                iframe.addEventListener('error', reject);\n\n            }).then(() => {\n\n                return awaitWindowHello(bridge, BRIDGE_TIMEOUT, `Bridge ${ url }`);\n\n            }).then(() => {\n\n                return bridge;\n            });\n        });\n    }));\n}\n\ntype WinDetails = {|\n    win : CrossDomainWindowType,\n    domain? : ?string,\n    name? : ?string\n|};\n\nexport function linkWindow({ win, name, domain } : WinDetails) : WinDetails {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n    const popupWindowsByWin = windowStore('popupWindowsByWin');\n\n    for (const winName of popupWindowsByName.keys()) {\n        // $FlowFixMe\n        if (isWindowClosed(popupWindowsByName.get(winName).win)) {\n            popupWindowsByName.del(winName);\n        }\n    }\n\n    const details : WinDetails = popupWindowsByWin.getOrSet(win, () => {\n        if (!name) {\n            return { win };\n        }\n        \n        return popupWindowsByName.getOrSet(name, () => {\n            return { win, name };\n        });\n    });\n\n    if (details.win && details.win !== win) {\n        throw new Error(`Different window already linked for window: ${ name || 'undefined' }`);\n    }\n\n    if (name) {\n        if (details.name && details.name !== name) {\n            throw new Error(`Different window already linked for name ${ name }: ${ details.name }`);\n        }\n\n        details.name = name;\n        popupWindowsByName.set(name, details);\n    }\n\n    if (domain) {\n        details.domain = domain;\n        registerRemoteWindow(win);\n    }\n\n    popupWindowsByWin.set(win, details);\n    \n    return details;\n}\n\nexport function linkUrl(win : CrossDomainWindowType, url : string) {\n    linkWindow({ win, domain: getDomainFromUrl(url) });\n}\n\nexport function listenForWindowOpen() {\n    const windowOpen = window.open;\n\n    window.open = function windowOpenWrapper(url : string, name : string, options : string, last : mixed) : mixed {\n        const win = windowOpen.call(this, normalizeMockUrl(url), name, options, last);\n    \n        if (!win) {\n            return win;\n        }\n    \n        linkWindow({ win, name, domain: url ? getDomainFromUrl(url) : null });\n    \n        return win;\n    };\n}\n\nexport function destroyBridges() {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n\n    for (const domain of bridgeFrames.keys()) {\n        const frame = bridgeFrames.get(domain);\n        if (frame && frame.parentNode) {\n            frame.parentNode.removeChild(frame);\n        }\n    }\n    bridgeFrames.reset();\n    bridges.reset();\n}\n","/* @flow */\n\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { listenForWindowOpen, listenForOpenTunnel } from './parent';\nimport { setupOpenTunnelToParent } from './bridge';\nimport { openTunnelToOpener } from './child';\n\nexport function setupBridge({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    listenForWindowOpen();\n    listenForOpenTunnel({ on, send, receiveMessage });\n    setupOpenTunnelToParent({ on, send });\n    openTunnelToOpener({ on, send, receiveMessage });\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { getParent, isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { getGlobal, globalStore } from '../global';\nimport type { SendType, ResponseMessageEvent } from '../types';\n\nfunction cleanTunnelWindows() {\n    const tunnelWindows = globalStore('tunnelWindows');\n\n    for (const key of tunnelWindows.keys()) {\n        const tunnelWindow = tunnelWindows[key];\n\n        try {\n            noop(tunnelWindow.source);\n        } catch (err) {\n            tunnelWindows.del(key);\n            continue;\n        }\n\n        if (isWindowClosed(tunnelWindow.source)) {\n            tunnelWindows.del(key);\n        }\n    }\n}\n\ntype TunnelWindowDataType = {|\n    name : string,\n    source : CrossDomainWindowType,\n    canary : () => void,\n    sendMessage : (message : string) => void\n|};\n\nfunction addTunnelWindow({ name, source, canary, sendMessage } : TunnelWindowDataType) : string {\n    cleanTunnelWindows();\n    const id = uniqueID();\n    const tunnelWindows = globalStore('tunnelWindows');\n    tunnelWindows.set(id, { name, source, canary, sendMessage });\n    return id;\n}\n\nexport function setupOpenTunnelToParent({ send } : { send : SendType }) {\n    getGlobal(window).openTunnelToParent = function openTunnelToParent({ name, source, canary, sendMessage } : TunnelWindowDataType) : ZalgoPromise<ResponseMessageEvent> {\n\n        const tunnelWindows = globalStore('tunnelWindows');\n        const parentWindow = getParent(window);\n    \n        if (!parentWindow) {\n            throw new Error(`No parent window found to open tunnel to`);\n        }\n    \n        const id = addTunnelWindow({ name, source, canary, sendMessage });\n    \n        return send(parentWindow, MESSAGE_NAME.OPEN_TUNNEL, {\n    \n            name,\n    \n            sendMessage() {\n    \n                const tunnelWindow = tunnelWindows.get(id);\n    \n                try {\n                    // IE gets antsy if you try to even reference a closed window\n                    noop(tunnelWindow && tunnelWindow.source);\n                } catch (err) {\n                    tunnelWindows.del(id);\n                    return;\n                }\n    \n                if (!tunnelWindow || !tunnelWindow.source || isWindowClosed(tunnelWindow.source)) {\n                    return;\n                }\n    \n                try {\n                    tunnelWindow.canary();\n                } catch (err) {\n                    return;\n                }\n    \n                tunnelWindow.sendMessage.apply(this, arguments);\n            }\n    \n        }, { domain: WILDCARD });\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isSameDomain, getOpener, getDomain, getFrameByName, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { getGlobal, windowStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { needsBridge, registerRemoteWindow, rejectRemoteSendMessage, registerRemoteSendMessage, getBridgeName } from './common';\n\nfunction awaitRemoteBridgeForWindow (win : CrossDomainWindowType) : ZalgoPromise<?CrossDomainWindowType> {\n    return windowStore('remoteBridgeAwaiters').getOrSet(win, () => {\n        return ZalgoPromise.try(() => {\n            const frame = getFrameByName(win, getBridgeName(getDomain()));\n\n            if (!frame) {\n                throw new Error(`Bridge not found for domain: ${ getDomain() }`);\n            }\n\n            // $FlowFixMe\n            if (isSameDomain(frame) && getGlobal(frame)) {\n                return frame;\n            }\n\n            return new ZalgoPromise((resolve, reject) => {\n\n                let interval;\n                let timeout; // eslint-disable-line prefer-const\n\n                interval = setInterval(() => { // eslint-disable-line prefer-const\n                    // $FlowFixMe\n                    if (frame && isSameDomain(frame) && getGlobal(frame)) {\n                        clearInterval(interval);\n                        clearTimeout(timeout);\n                        return resolve(frame);\n                    }\n                }, 100);\n\n                timeout = setTimeout(() => {\n                    clearInterval(interval);\n                    return reject(new Error(`Bridge not found for domain: ${ getDomain() }`));\n                }, 2000);\n            });\n        });\n    });\n}\n\nexport function openTunnelToOpener({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        const opener = getOpener(window);\n\n        if (!opener) {\n            return;\n        }\n\n        if (!needsBridge({ win: opener })) {\n            return;\n        }\n\n        registerRemoteWindow(opener);\n\n        return awaitRemoteBridgeForWindow(opener).then(bridge => {\n\n            if (!window.name) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: window does not have a name`));\n            }\n\n            // $FlowFixMe\n            return getGlobal(bridge).openTunnelToParent({\n\n                name: window.name,\n\n                source: window,\n\n                canary() {\n                    // pass\n                },\n\n                sendMessage(message) {\n\n                    try {\n                        noop(window);\n                    } catch (err) {\n                        return;\n                    }\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: this.origin,\n                            source: this.source\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n\n            }).then(({ source, origin, data }) => {\n\n                if (source !== opener) {\n                    throw new Error(`Source does not match opener`);\n                }\n\n                registerRemoteSendMessage(source, origin, data.sendMessage);\n\n            }).catch(err => {\n\n                rejectRemoteSendMessage(opener, err);\n                throw err;\n            });\n        });\n    });\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, type DomainMatcher, getOpener, WINDOW_TYPE, isWindow } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { OnType, SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedProxyWindow = {|\n    id : string,\n    type : $Values<typeof WINDOW_TYPE>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nexport class ProxyWindow {\n\n    isProxyWindow : true = true\n    serializedWindow : SerializedProxyWindow\n    actualWindow : CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n\n    constructor(serializedWindow : SerializedProxyWindow, actualWindow? : ?CrossDomainWindowType, { send } : { send : SendType }) {\n        this.serializedWindow = serializedWindow;\n        this.actualWindowPromise = new ZalgoPromise();\n        if (actualWindow) {\n            this.setWindow(actualWindow);\n        }\n        this.serializedWindow.getInstanceID = memoizePromise(this.serializedWindow.getInstanceID);\n        this.send = send;\n    }\n\n    getType() : $Values<typeof WINDOW_TYPE> {\n        return this.serializedWindow.type;\n    }\n\n    isPopup() : boolean {\n        return this.getType() === WINDOW_TYPE.POPUP;\n    }\n\n    isIframe() : boolean {\n        return this.getType() === WINDOW_TYPE.IFRAME;\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.location = href;\n            } else {\n                return this.serializedWindow.setLocation(href);\n            }\n        }).then(() => this);\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                if (!isSameDomain(this.actualWindow)) {\n                    throw new Error(`Can not set name for window on different domain`);\n                }\n                // $FlowFixMe\n                this.actualWindow.name = name;\n                // $FlowFixMe\n                if (this.actualWindow.frameElement) {\n                    // $FlowFixMe\n                    this.actualWindow.frameElement.setAttribute('name', name);\n                }\n\n                if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                    \n                    linkWindow({ win: this.actualWindow, name });\n                }\n\n            } else {\n                return this.serializedWindow.setName(name);\n            }\n        }).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.close();\n            } else {\n                return this.serializedWindow.close();\n            }\n        }).then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.focus();\n            }\n            return this.serializedWindow.focus();\n        }).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return isWindowClosed(this.actualWindow);\n            } else {\n                return this.serializedWindow.isClosed();\n            }\n        });\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType) {\n        this.actualWindow = win;\n        this.actualWindowPromise.resolve(win);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.all([\n                this.getInstanceID(),\n                getWindowInstanceID(win, { send: this.send })\n            ]).then(([ proxyInstanceID, knownWindowInstanceID ]) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win);\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        if (this.actualWindow) {\n            return getWindowInstanceID(this.actualWindow, { send: this.send });\n        } else {\n            return this.serializedWindow.getInstanceID();\n        }\n    }\n\n    serialize() : SerializedProxyWindow {\n        return this.serializedWindow;\n    }\n\n    shouldClean() : boolean {\n        return this.actualWindow && isWindowClosed(this.actualWindow);\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : SerializedProxyWindow {\n        cleanupProxyWindows();\n\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n        \n        return globalStore('idToProxyWindow').getOrSet(serializedWindow.id, () => {\n            return new ProxyWindow(serializedWindow, null, { on, send });\n        });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        return windowStore('winToProxyWindow').getOrSet(win, () => {\n            const id = uniqueID();\n\n            return globalStore('idToProxyWindow').set(id, new ProxyWindow({\n                id,\n                // $FlowFixMe\n                type:          getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME,\n                // $FlowFixMe\n                getInstanceID: () => getWindowInstanceID(win, { send }),\n                close:         () => ZalgoPromise.try(() => {\n                    win.close();\n                }),\n                focus:         () => ZalgoPromise.try(() => {\n                    win.focus();\n                }),\n                isClosed:      () => ZalgoPromise.try(() => {\n                    // $FlowFixMe\n                    return isWindowClosed(win);\n                }),\n                setLocation:   (href) => ZalgoPromise.try(() => {\n                    // $FlowFixMe\n                    if (isSameDomain(win)) {\n                        try {\n                            if (win.location && typeof win.location.replace === 'function') {\n                                // $FlowFixMe\n                                win.location.replace(href);\n                                return;\n                            }\n                        } catch (err) {\n                            // pass\n                        }\n                    }\n    \n                    // $FlowFixMe\n                    win.location = href;\n                }),\n                setName:       (name) => ZalgoPromise.try(() => {\n                    if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                        // $FlowFixMe\n                        linkWindow({ win, name });\n                    }\n                    // $FlowFixMe\n                    win.name = name;\n                })\n            // $FlowFixMe\n            }, win, { send }));\n        });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedProxyWindow>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { on, send });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction listenForFunctionCalls({ on } : { on : OnType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ data.name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : () => ZalgoPromise<T> | T, key : string, { on } : { on : OnType }) : SerializedFunction {\n    listenForFunctionCalls({ on });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    const name = val.__name__ || val.name || key;\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }, { send } : { send : SendType }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    return send(win, MESSAGE_NAME.METHOD, { id, name, args: Array.prototype.slice.call(arguments) }, { domain: origin, fireAndForget: opts.fireAndForget })\n                        .then(res => {\n                            if (!opts.fireAndForget) {\n                                return res.data.result;\n                            }\n                        });\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : { on : OnType, send : SendType }) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { on, send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { on, send } : { on : OnType, send : SendType }) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { on, send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { on, send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, type DomainMatcher, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\nexport const SEND_MESSAGE_STRATEGIES = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n\n            if (window.location.protocol === PROTOCOL.FILE) {\n                return WILDCARD;\n            }\n\n            if (!isActuallySameDomain(win)) {\n                throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n            }\n\n            // $FlowFixMe\n            return getActualDomain(win);\n        }\n\n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            return;\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            return;\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nexport function sendMessage(win : CrossDomainWindowType, domain : DomainMatcher, message : Message, { on, send } : { on : OnType, send : SendType }) {\n    if (isWindowClosed(win)) {\n        throw new Error('Window is closed');\n    }\n    \n    const serializedMessage = serializeMessage(win, domain, {\n        [ __POST_ROBOT__.__GLOBAL_KEY__ ]: {\n            id: uniqueID(),\n            ...message\n        }\n    }, { on, send });\n\n    let success = false;\n    let error;\n\n    for (const strategyName of Object.keys(SEND_MESSAGE_STRATEGIES)) {\n        try {\n            SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n            success = true;\n        } catch (err) {\n            error = error || err;\n        }\n    }\n\n    if (!success) {\n        throw error;\n    }\n}\n","/* @flow */\n\nimport { getUserAgent } from 'cross-domain-utils/src';\n\nexport function needsGlobalMessagingForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|rv:11|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) }) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const nameListeners = requestListeners.getOrSet(win, () => ({}));\n    // $FlowFixMe\n    const domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    const strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                // $FlowFixMe\n                delete nameListeners[name];\n            }\n\n            // $FlowFixMe\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport const RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : { on : OnType, send : SendType }) : ZalgoPromise<void> {\n\n        const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (__DEBUG__) {\n            // eslint-disable-next-line no-console\n            console.info('receive::req', logName, origin, '\\n\\n', message.data);\n        }\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, ack? : $Values<typeof MESSAGE_ACK>, response = {}) {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            if (__DEBUG__ && type !== MESSAGE_TYPE.ACK) {\n                if (ack === MESSAGE_ACK.SUCCESS) {\n                    // $FlowFixMe\n                    console.info('respond::res', logName, origin, '\\n\\n', response.data);  // eslint-disable-line no-console\n                } else if (ack === MESSAGE_ACK.ERROR) {\n                    // $FlowFixMe\n                    console.error('respond::err', logName, origin, '\\n\\n', response.error); // eslint-disable-line no-console\n                }\n            }\n\n            // $FlowFixMe\n            sendMessage(source, origin, {\n                type,\n                ack,\n                hash:   message.hash,\n                name:   message.name,\n                ...response\n            }, { on, send });\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                const data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.SUCCESS, { data });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.ERROR, { error });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Ack source does not match registered window`);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Response source does not match registered window`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            if (__DEBUG__) {\n                console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n            }\n\n            options.promise.reject(message.error);\n\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            if (__DEBUG__) {\n                console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n            }\n\n            options.promise.resolve({ source, origin, data: message.data });\n        }\n    }\n};\n","/* @flow */\n\nimport { setup } from './setup';\nimport { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge, needsBridgeForBrowser, hasBridge,\n    needsBridgeForWin, needsBridgeForDomain, destroyBridges } from './bridge';\n\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\n\nexport * from './types';\nexport { ProxyWindow } from './serialize';\nexport { setup, serializeMessage, deserializeMessage, toProxyWindow } from './setup';\nexport { on, once, send } from './public';\nexport { markWindowKnown } from './lib';\nexport { cleanUpWindow } from './clean';\nexport let bridge;\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n    bridge = { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge,\n        needsBridgeForBrowser, hasBridge, needsBridgeForWin, needsBridgeForDomain, destroyBridges };\n}\n\nif (__POST_ROBOT__.__AUTO_SETUP__) {\n    setup();\n}\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string, { on, send } : { on : OnType, send : SendType }) : ?Object {\n\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[__POST_ROBOT__.__GLOBAL_KEY__];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : { on : OnType, send : SendType }) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    if (!window || window.closed) {\n        throw new Error(`Message recieved in closed window`);\n    }\n\n    try {\n        if (!event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const message = parseMessage(data, source, origin, { on, send });\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message, { on, send });\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : { on : OnType, send : SendType }) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : { origin : string }\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : { on : OnType, send : SendType }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    // $FlowFixMe\n    const messageEvent : MessageEvent = {\n        source: event.source || event.sourceElement,\n        origin: event.origin || (event.originalEvent && event.originalEvent.origin),\n        data:   event.data\n    };\n\n    if (!messageEvent.source) {\n        return;\n    }\n\n    if (!messageEvent.origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(messageEvent.source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage(messageEvent, { on, send });\n}\n\nexport function listenForMessages({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore().getOrSet('postMessageListeners', () => {\n        // $FlowFixMe\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    options = options || {};\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    const win = options.window;\n    const domain = options.domain;\n\n    const listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    const requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function once(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n    \n    // $FlowFixMe\n    options = options || {};\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    promise.cancel = listener.cancel;\n    return promise;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport type { RequestOptionsType, ResponseMessageEvent } from '../types';\n\nimport { on } from './on';\n\nexport function send(win : CrossDomainWindowType, name : string, data : ?Object, options? : RequestOptionsType) : ZalgoPromise<ResponseMessageEvent> {\n    \n    // $FlowFixMe\n    options = options || {};\n    let domain = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    const prom = ZalgoPromise.try(() => {\n        if (!name) {\n            throw new Error('Expected name');\n        }\n\n        if (domain) {\n            if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n                throw new TypeError(`Expected domain to be a string, array, or regex`);\n            }\n        }\n\n        if (isWindowClosed(win)) {\n            throw new Error('Target window is closed');\n        }\n\n        const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n\n        // $FlowFixMe\n        const requestPromise = ZalgoPromise.try(() => {\n\n            if (isAncestor(window, win)) {\n                return awaitWindowHello(win, childTimeout);\n            } else if (isRegex(domain)) {\n                return sayHello(win, { send });\n            }\n\n        // $FlowFixMe\n        }).then(({ domain: origin } = {}) => {\n\n            if (isRegex(domain)) {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Remote window domain ${ origin } does not match regex: ${ domain.source }`);\n                }\n                domain = origin;\n            }\n\n            const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n            if (__DEBUG__) {\n                console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n            }\n\n            let hasResult = false;\n\n            const promise = new ZalgoPromise();\n            promise.finally(() => {\n                hasResult = true;\n                reqPromises.splice(reqPromises.indexOf(requestPromise, 1));\n            }).catch(noop);\n\n            const hash = `${ name }_${ uniqueID() }`;\n\n            sendMessage(win, domain, {\n                type: MESSAGE_TYPE.REQUEST,\n                hash,\n                name,\n                data,\n                fireAndForget\n            }, { on, send });\n\n            if (fireAndForget) {\n                return promise.resolve();\n            }\n\n            promise.catch(() => {\n                markResponseListenerErrored(hash);\n                deleteResponseListener(hash);\n            });\n\n            const responseListener : ResponseListenerType = {\n                name,\n                win,\n                domain,\n                promise\n            };\n\n            addResponseListener(hash, responseListener);\n\n            const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n            const totalResTimeout = responseTimeout;\n\n            let ackTimeout = totalAckTimeout;\n            let resTimeout = totalResTimeout;\n\n            let cycleTime = 100;\n\n            const cycle = () => {\n                if (hasResult) {\n                    return;\n                }\n\n                if (isWindowClosed(win)) {\n                    if (!responseListener.ack) {\n                        return promise.reject(new Error(`Window closed for ${ name } before ack`));\n                    } else {\n                        return promise.reject(new Error(`Window closed for ${ name } before response`));\n                    }\n                }\n\n                ackTimeout = Math.max(ackTimeout - cycleTime, 0);\n                if (resTimeout !== -1) {\n                    resTimeout = Math.max(resTimeout - cycleTime, 0);\n                }\n\n                const hasAck = responseListener.ack;\n\n                if (hasAck) {\n                    if (resTimeout === -1) {\n                        return;\n                    }\n\n                    cycleTime = Math.min(resTimeout, 2000);\n\n                } else if (ackTimeout === 0) {\n                    return promise.reject(new Error(`No ack for postMessage ${ name } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                } else if (resTimeout === 0) {\n                    return promise.reject(new Error(`No response for postMessage ${ name } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                }\n\n                setTimeout(cycle, cycleTime);\n            };\n\n            setTimeout(cycle, cycleTime);\n\n            return promise;\n        });\n\n        reqPromises.push(requestPromise);\n        return requestPromise;\n    });\n\n    return prom;\n}\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, receiveMessage, setupGlobalReceiveMessage } from './drivers';\nimport { getGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n        setupGlobalReceiveMessage({ on, send });\n    }\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window cleaned up before response`)).catch(noop);\n    }\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from 'zalgo-promise/src';\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\n// export something to force webpack to see this as an ES module\nexport const TYPES = true;\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type CancelableType = {\n    cancel : () => void\n};\n\nexport type ErrorHandlerType = (err : mixed) => void;\n\nexport type HandlerType = ({\n    source : CrossDomainWindowType,\n    origin : string,\n    data : any // eslint-disable-line flowtype/no-weak-types\n}) => (void | any | ZalgoPromise<any>); // eslint-disable-line flowtype/no-weak-types\n\nexport type ServerOptionsType = {|\n    handler? : ?HandlerType,\n    errorHandler? : ?ErrorHandlerType,\n    window? : CrossDomainWindowType,\n    name? : ?string,\n    domain? : ?DomainMatcher,\n    once? : ?boolean,\n    errorOnClose? : ?boolean\n|};\n\nexport type OnType = (\n    name : string,\n    options : ServerOptionsType | HandlerType,\n    handler : ?HandlerType\n) => CancelableType;\n\nexport type RequestOptionsType = {|\n    domain? : ?DomainMatcher,\n    fireAndForget? : ?boolean,\n    timeout? : ?number\n|};\n\nexport type ResponseMessageEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : Object\n|};\n\nexport type SendType = (\n    win : CrossDomainWindowType,\n    name : string,\n    data : ?Object,\n    options? : RequestOptionsType\n) => ZalgoPromise<ResponseMessageEvent>;\n\nexport type MessageEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string\n|};\n\nexport type ReceiveMessageType = (MessageEvent, { on : OnType, send : SendType }) => void;\n"],"sourceRoot":""}